// <auto-generated />
using System;
using CleanService.Src.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanService.Migrations
{
    [DbContext(typeof(CleanServiceContext))]
    [Migration("20241011161939_RemovePwdFromUser")]
    partial class RemovePwdFromUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CleanService.Src.Models.Bookings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("char(255)");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("longtext");

                    b.Property<Guid>("CustomerId")
                        .HasMaxLength(255)
                        .HasColumnType("char(255)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Feedback")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("HelperId")
                        .HasMaxLength(255)
                        .HasColumnType("char(255)")
                        .HasComment("Can be NULL if not assigned yet");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasMaxLength(255)
                        .HasColumnType("char(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HelperId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CleanService.Src.Models.Contracts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasMaxLength(255)
                        .HasColumnType("char(255)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2024, 10, 11, 23, 19, 38, 762, DateTimeKind.Local).AddTicks(6088));

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("CleanService.Src.Models.Helpers", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("char(255)");

                    b.Property<decimal>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("CancelledJobs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CompletedJobs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ExperienceDescription")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("ProposedPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ServicesOffered")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Helpers", t =>
                        {
                            t.HasComment("Additional information for users' type is helper");
                        });
                });

            modelBuilder.Entity("CleanService.Src.Models.RestrictedList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("char(255)");

                    b.Property<Guid>("CustomerId")
                        .HasMaxLength(255)
                        .HasColumnType("char(255)");

                    b.Property<Guid>("HelperId")
                        .HasMaxLength(255)
                        .HasColumnType("char(255)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HelperId");

                    b.ToTable("RestrictedList");
                });

            modelBuilder.Entity("CleanService.Src.Models.Services", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceName");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("CleanService.Src.Models.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("char(255)");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2024, 10, 11, 23, 19, 38, 761, DateTimeKind.Local).AddTicks(8220));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FullName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CleanService.Src.Models.Bookings", b =>
                {
                    b.HasOne("CleanService.Src.Models.Users", "Customer")
                        .WithMany("CustomerBookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanService.Src.Models.Users", "Helper")
                        .WithMany("HelperBookings")
                        .HasForeignKey("HelperId");

                    b.HasOne("CleanService.Src.Models.Services", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Helper");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CleanService.Src.Models.Contracts", b =>
                {
                    b.HasOne("CleanService.Src.Models.Bookings", "Booking")
                        .WithOne("Contract")
                        .HasForeignKey("CleanService.Src.Models.Contracts", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("CleanService.Src.Models.Helpers", b =>
                {
                    b.HasOne("CleanService.Src.Models.Users", "User")
                        .WithOne("Helper")
                        .HasForeignKey("CleanService.Src.Models.Helpers", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanService.Src.Models.RestrictedList", b =>
                {
                    b.HasOne("CleanService.Src.Models.Users", "Customer")
                        .WithMany("CustomerRestrictedList")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanService.Src.Models.Users", "Helper")
                        .WithMany("HelperRestrictedList")
                        .HasForeignKey("HelperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Helper");
                });

            modelBuilder.Entity("CleanService.Src.Models.Bookings", b =>
                {
                    b.Navigation("Contract")
                        .IsRequired();
                });

            modelBuilder.Entity("CleanService.Src.Models.Users", b =>
                {
                    b.Navigation("CustomerBookings");

                    b.Navigation("CustomerRestrictedList");

                    b.Navigation("Helper");

                    b.Navigation("HelperBookings");

                    b.Navigation("HelperRestrictedList");
                });
#pragma warning restore 612, 618
        }
    }
}
